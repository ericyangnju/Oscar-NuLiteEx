<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\NuLiteEx\NuLiteEx.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\NuLiteEx\NuLiteEx.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Tue Jan 05 13:53:34 2016
<BR><P>
<H3>Maximum Stack Usage =        688 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; GyroCalibrate &rArr; SensorsDynamicCalibrate &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[2c]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">SVC_Handler</a><BR>
 <LI><a href="#[9]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">PendSV_Handler</a><BR>
 <LI><a href="#[12]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[19]">ACMP_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1d]">ADC_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[10]">ALC_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1c]">CAPS_IRQHandler</a> from interrupthandler.o(i.CAPS_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[12]">Default_Handler</a> from startup_isd9100.o(.text) referenced 13 times from startup_isd9100.o(RESET)
 <LI><a href="#[29]">Default_KeyHandler</a> from inputkeyactions.o(i.Default_KeyHandler) referenced 9 times from configio.o(.constdata)
 <LI><a href="#[d]">EINT0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[e]">EINT1_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[f]">GPAB_IRQHandler</a> from interrupthandler.o(i.GPAB_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[17]">I2C0_IRQHandler</a> from i2c0int.o(i.I2C0_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[26]">I2C_MasterRx</a> from i2c0int.o(i.I2C_MasterRx) referenced from mpu6050.o(i.MPU6050_I2C_SingleRead)
 <LI><a href="#[24]">I2C_MasterRx_var</a> from i2c0int.o(i.I2C_MasterRx_var) referenced from hdc1000.o(i.HDC1000_I2C_SingleRead)
 <LI><a href="#[27]">I2C_MasterTx</a> from i2c0int.o(i.I2C_MasterTx) referenced from mpu6050.o(i.MPU6050_I2C_SingleWrite)
 <LI><a href="#[27]">I2C_MasterTx</a> from i2c0int.o(i.I2C_MasterTx) referenced from ly096bg30.o(i.OLED_SingleWrite)
 <LI><a href="#[25]">I2C_MasterTx_var</a> from i2c0int.o(i.I2C_MasterTx_var) referenced from hdc1000.o(i.HDC1000_I2C_SingleWrite)
 <LI><a href="#[1b]">I2S_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1a]">PDMA_IRQHandler</a> from interrupthandler.o(i.PDMA_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[11]">PWM0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[9]">PendSV_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[1e]">RTC_IRQHandler</a> from interrupthandler.o(i.RTC_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[2a]">Reset_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[16]">SPI0_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[23]">SPIFlash_ReadDataCallback</a> from appcallback.o(i.SPIFlash_ReadDataCallback) referenced from appcallback.o(.constdata)
 <LI><a href="#[23]">SPIFlash_ReadDataCallback</a> from appcallback.o(i.SPIFlash_ReadDataCallback) referenced from appfunctions.o(i.App_Initiate)
 <LI><a href="#[8]">SVC_Handler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[a]">SysTick_Handler</a> from timer_ctrl.o(i.SysTick_Handler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[18]">TALARM_IRQHandler</a> from startup_isd9100.o(.text) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[13]">TMR0_IRQHandler</a> from timer_ctrl.o(i.TMR0_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[14]">TMR1_IRQHandler</a> from interrupthandler.o(i.TMR1_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[15]">UART0_IRQHandler</a> from main.o(i.UART0_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[28]">UserEvent_ProcessCallback</a> from appcallback.o(i.UserEvent_ProcessCallback) referenced from appcallback.o(.constdata)
 <LI><a href="#[c]">WDT_IRQHandler</a> from interrupthandler.o(i.WDT_IRQHandler) referenced from startup_isd9100.o(RESET)
 <LI><a href="#[2b]">__main</a> from __main.o(!!!main) referenced from startup_isd9100.o(.text)
 <LI><a href="#[21]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[20]">_sputc</a> from _sputc.o(.text) referenced from noretval__2sprintf.o(.text)
 <LI><a href="#[22]">fputc</a> from retarget.o(i.fputc) referenced from _printf_char_file.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[2b]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2d]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[2f]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[183]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[184]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[30]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[185]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[31]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[32]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent_end
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[34]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[186]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[187]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[188]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[189]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[18f]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[190]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[191]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[192]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[193]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[194]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[195]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[196]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[197]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[198]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[199]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[19a]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[19b]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[19c]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[19d]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[19e]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[19f]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1a0]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1a1]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[2e]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1a2]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1a3]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; GyroCalibrate &rArr; SensorsDynamicCalibrate &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1a4]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[6d]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1a5]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[fc]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[1a6]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy.o(.emb_text), UNUSED)

<P><STRONG><a name="[2a]"></a>Reset_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, startup_isd9100.o(.text))

<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ACMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>ALC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TALARM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_isd9100.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>__2printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
</UL>

<P><STRONG><a name="[43]"></a>__2sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, noretval__2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>_printf_int_dec</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed (Weak Reference)
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_udiv10
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[35]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned (Weak Reference)
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1a7]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__printf</STRONG> (Thumb, 270 bytes, Stack size 32 bytes, __printf_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[167]"></a>strstr</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[168]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_Line
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[4c]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetOutputBuf
</UL>

<P><STRONG><a name="[1a8]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[e8]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeInitiate
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetOutputBuf
</UL>

<P><STRONG><a name="[1a9]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1aa]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertHTValue
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_SetSampleRate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWorkingFreq
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetVarClock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothInput
</UL>

<P><STRONG><a name="[1ab]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>__aeabi_idivmod</STRONG> (Thumb, 460 bytes, Stack size 8 bytes, aeabi_sdivfast.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
</UL>

<P><STRONG><a name="[1ac]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[ac]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[1af]"></a>_d2f</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, d2f.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[50]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[14c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[53]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[14d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[54]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[56]"></a>_ddiv</STRONG> (Thumb, 1072 bytes, Stack size 64 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drdiv
</UL>

<P><STRONG><a name="[55]"></a>_drdiv</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[1b0]"></a>_dfix</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, dfixi.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[1b1]"></a>_dfixu</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, dfixui.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>__aeabi_i2d_normalise</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[57]"></a>__aeabi_i2d</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1b2]"></a>_dflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[59]"></a>__aeabi_ui2d</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[1b3]"></a>_dfltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflti.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1b4]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, dmul.o(.text), UNUSED)

<P><STRONG><a name="[aa]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[1b5]"></a>_f2d</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, f2d.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_fdiv</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_delta
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[5b]"></a>_fdiv</STRONG> (Thumb, 334 bytes, Stack size 20 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frdiv
</UL>

<P><STRONG><a name="[5a]"></a>_frdiv</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fdiv
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_f2iz</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ffixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
</UL>

<P><STRONG><a name="[1b6]"></a>_ffix</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, ffixi.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
</UL>

<P><STRONG><a name="[1b7]"></a>_ffixu</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ffixui.o(.text), UNUSED)

<P><STRONG><a name="[5d]"></a>__aeabi_i2f_normalise</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[5c]"></a>__aeabi_i2f</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterCalibrateACC
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothInput
</UL>

<P><STRONG><a name="[1b8]"></a>_fflt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[5e]"></a>__aeabi_ui2f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
</UL>

<P><STRONG><a name="[1b9]"></a>_ffltu</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fflti.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>__ARM_scalbnf</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, fscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_scalbnf
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[5f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[61]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[48]"></a>_printf_int_common</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding (Weak Reference)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[44]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[20]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> noretval__2sprintf.o(.text)
</UL>
<P><STRONG><a name="[42]"></a>_printf_char_file</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[47]"></a>__rt_udiv10</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, rtudiv10.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[65]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, dcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[14f]"></a>__ARM_scalbn</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dscalbn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[17a]"></a>_dsqrt</STRONG> (Thumb, 248 bytes, Stack size 20 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[68]"></a>__fpl_fcmp_InfNaN</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, fcmpin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frcmple
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fcmple
</UL>

<P><STRONG><a name="[60]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>

<P><STRONG><a name="[1ba]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[66]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, cmpret.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[67]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[69]"></a>__fpl_fcheck_NaN2</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, fnan2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[1bc]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1bd]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_call_atexit_fns (Weak Reference)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[6a]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, retnan.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN2
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[1be]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1bf]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>AccCalibrate</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gauss_newton_calibrate.o(i.AccCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = AccCalibrate &rArr; calibrate_model_acc &rArr; update_calibration_matrices &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[71]"></a>AccCalibrationZ</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mpu6050_api.o(i.AccCalibrationZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = AccCalibrationZ &rArr; nvtCalACCBufferFill &rArr; AccZCalibrate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccZ
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccX
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>AccFilterInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, accfilter.o(i.AccFilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = AccFilterInit &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetAHRSPeriod
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[7f]"></a>AccZCalibrate</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, gauss_newton_calibrate.o(i.AccZCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = AccZCalibrate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[83]"></a>App_Initiate</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, appfunctions.o(i.App_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = App_Initiate &rArr; NuLiteExApp_DecodeInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Initiate
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeInitiate
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRom_GetAudioNum
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[89]"></a>App_ProcessPlay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, appfunctions.o(i.App_ProcessPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = App_ProcessPlay &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8b]"></a>App_StartPlay</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, appfunctions.o(i.App_StartPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = App_StartPlay &rArr; NuLiteExApp_DecodeStartPlayByID &rArr; NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Start
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByID
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayPrev_KeypadHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayNext_KeypadHandler
</UL>

<P><STRONG><a name="[8f]"></a>App_StopPlay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, appfunctions.o(i.App_StopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = App_StopPlay &rArr; NuLiteExApp_DecodeStopPlay &rArr; Playback_Remove &rArr; SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStopPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>AudioRom_GetAudioChunkInfo</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, audiorom.o(i.AudioRom_GetAudioChunkInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AudioRom_GetAudioChunkInfo &rArr; AudioRom_GetRomHeader
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRom_GetRomHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByID
</UL>

<P><STRONG><a name="[87]"></a>AudioRom_GetAudioNum</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, audiorom.o(i.AudioRom_GetAudioNum))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AudioRom_GetAudioNum
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[94]"></a>AudioRom_GetRomHeader</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, audiorom.o(i.AudioRom_GetRomHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AudioRom_GetRomHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRom_GetAudioChunkInfo
</UL>

<P><STRONG><a name="[97]"></a>BIQ_Reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, biq.o(i.BIQ_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>

<P><STRONG><a name="[98]"></a>BIQ_SetCoeff</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, biq.o(i.BIQ_SetCoeff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BIQ_SetCoeff
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>

<P><STRONG><a name="[ed]"></a>BufCtrl_WriteWithCount</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, bufctrl.o(i.BufCtrl_WriteWithCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BufCtrl_WriteWithCount
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
</UL>

<P><STRONG><a name="[1c]"></a>CAPS_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, interrupthandler.o(i.CAPS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>CLK_EnableLDO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, clk.o(i.CLK_EnableLDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableLDO
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Unlock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[96]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, clk.o(i.CLK_EnableModuleClock))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>

<P><STRONG><a name="[9c]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, clk.o(i.CLK_EnableXtalRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_EnableXtalRC
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Unlock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
</UL>

<P><STRONG><a name="[9d]"></a>CLK_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(i.CLK_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetVarClock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
</UL>

<P><STRONG><a name="[9f]"></a>CLK_SetHCLK</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, clk.o(i.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Unlock
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Lock
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
</UL>

<P><STRONG><a name="[125]"></a>CLK_SetModuleClock</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, clk.o(i.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
</UL>

<P><STRONG><a name="[16c]"></a>CalInfoInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, ahrslib.o(i.CalInfoInit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[a0]"></a>CheckEmpirical</STRONG> (Thumb, 416 bytes, Stack size 40 bytes, gyrodriftcalibrate.o(i.CheckEmpirical))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CheckEmpirical &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[a5]"></a>CheckGyroNormalParam</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, gyrodriftcalibrate.o(i.CheckGyroNormalParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quickSortIterative
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckMode
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[a8]"></a>CheckMode</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gyrodriftcalibrate.o(i.CheckMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CheckMode
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[a9]"></a>CheckNormalDistribution</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, gyrodriftcalibrate.o(i.CheckNormalDistribution))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CheckNormalDistribution &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[16a]"></a>CheckSecurityID</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, security.o(i.CheckSecurityID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtMillisecondTick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[a7]"></a>CheckStandardDV</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, gyrodriftcalibrate.o(i.CheckStandardDV))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CheckStandardDV &rArr; sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[179]"></a>ChronographStart</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer_ctrl.o(i.ChronographStart))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
</UL>

<P><STRONG><a name="[ad]"></a>ComputeEuler</STRONG> (Thumb, 488 bytes, Stack size 48 bytes, sensorfusion6.o(i.ComputeEuler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ComputeEuler &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[b3]"></a>ComputeMotion</STRONG> (Thumb, 764 bytes, Stack size 88 bytes, sensorfusion6.o(i.ComputeMotion))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ComputeMotion &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[b4]"></a>ConvertHTValue</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i.ConvertHTValue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ConvertHTValue &rArr; Read_HDC1000_Temperature &rArr; HDC1000_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDC1000_Temperature
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDC1000_Humidity
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>ConvertMPU6050Value</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, main.o(i.ConvertMPU6050Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = ConvertMPU6050Value &rArr; nvtUpdateAHRS &rArr; sensfusion9UpdateQ &rArr; sensfusion6UpdateQ &rArr; ComputeEuler &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerRPY
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroZ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroY
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccZ
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccX
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;transfer
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>DPWM_Open</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dpwm.o(i.DPWM_Open))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
</UL>

<P><STRONG><a name="[c0]"></a>DPWM_SetSampleRate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dpwm.o(i.DPWM_SetSampleRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
</UL>

<P><STRONG><a name="[29]"></a>Default_KeyHandler</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, inputkeyactions.o(i.Default_KeyHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = Default_KeyHandler &rArr; Playback_KeypadHandler &rArr; App_StartPlay &rArr; NuLiteExApp_DecodeStartPlayByID &rArr; NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayPrev_KeypadHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayNext_KeypadHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> configio.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>DelayMsec</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, timer_ctrl.o(i.DelayMsec))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = DelayMsec
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getTickCount
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
</UL>

<P><STRONG><a name="[135]"></a>FMCReadUCID</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, security.o(i.FMCReadUCID))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FMCReadUCID
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[136]"></a>FMC_Close</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Close))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[134]"></a>FMC_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fmc.o(i.FMC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[12a]"></a>FilterACCInit</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, acccalibrate.o(i.FilterACCInit))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
</UL>

<P><STRONG><a name="[c5]"></a>FilterCalibrateACC</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, accfilter.o(i.FilterCalibrateACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FilterCalibrateACC &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[f]"></a>GPAB_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, interrupthandler.o(i.GPAB_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[e0]"></a>GPIO_SetMode</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(i.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Initiate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[7a]"></a>GetAHRSPeriod</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ahrslib.o(i.GetAHRSPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
</UL>

<P><STRONG><a name="[14a]"></a>GetCalibrateParams</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gauss_newton_calibrate.o(i.GetCalibrateParams))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCalibrateInfoACC
</UL>

<P><STRONG><a name="[170]"></a>GetGyroDynamicCenter</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gyrodriftcalibrate.o(i.GetGyroDynamicCenter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GetGyroDynamicCenter
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[15c]"></a>GetMagGuass</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, magcalibrate.o(i.GetMagGuass))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
</UL>

<P><STRONG><a name="[177]"></a>GetTickCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ahrslib.o(i.GetTickCounter))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[c6]"></a>GyroCalibrate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mpu6050_api.o(i.GyroCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = GyroCalibrate &rArr; SensorsDynamicCalibrate &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroZ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroY
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroX
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>GyroDynamicCalibrate</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, gyrodriftcalibrate.o(i.GyroDynamicCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushBuffer
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNormalDistribution
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[115]"></a>HDC1000_I2C_SingleRead</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hdc1000.o(i.HDC1000_I2C_SingleRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDC1000_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDC1000_Temperature
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_HDC1000_Humidity
</UL>

<P><STRONG><a name="[d8]"></a>HDC1000_I2C_SingleWrite</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, hdc1000.o(i.HDC1000_I2C_SingleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HDC1000_I2C_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HDC1000
</UL>

<P><STRONG><a name="[17]"></a>I2C0_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, i2c0int.o(i.I2C0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ClearTimeoutFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>I2C_ClearTimeoutFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_ClearTimeoutFlag))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C0_IRQHandler
</UL>

<P><STRONG><a name="[165]"></a>I2C_EnableInt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, i2c.o(i.I2C_EnableInt))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[26]"></a>I2C_MasterRx</STRONG> (Thumb, 286 bytes, Stack size 0 bytes, i2c0int.o(i.I2C_MasterRx))
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.MPU6050_I2C_SingleRead)
</UL>
<P><STRONG><a name="[24]"></a>I2C_MasterRx_var</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, i2c0int.o(i.I2C_MasterRx_var))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_MasterRx_var
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hdc1000.o(i.HDC1000_I2C_SingleRead)
</UL>
<P><STRONG><a name="[27]"></a>I2C_MasterTx</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, i2c0int.o(i.I2C_MasterTx))
<BR>[Address Reference Count : 2]<UL><LI> mpu6050.o(i.MPU6050_I2C_SingleWrite)
<LI> ly096bg30.o(i.OLED_SingleWrite)
</UL>
<P><STRONG><a name="[25]"></a>I2C_MasterTx_var</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, i2c0int.o(i.I2C_MasterTx_var))
<BR>[Address Reference Count : 1]<UL><LI> hdc1000.o(i.HDC1000_I2C_SingleWrite)
</UL>
<P><STRONG><a name="[cb]"></a>I2C_Open</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, i2c.o(i.I2C_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
</UL>

<P><STRONG><a name="[d7]"></a>I2C_SetSlaveAddr</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, i2c.o(i.I2C_SetSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HDC1000
</UL>

<P><STRONG><a name="[cc]"></a>Init_AHRS</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, mpu6050_api.o(i.Init_AHRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Init_AHRS &rArr; nvtAHRSInit &rArr; AccFilterInit &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetGyroScale
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetGyroOffset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetGYRODegPLSB
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetAccScale
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetAccOffset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtSetAccG_PER_LSB
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d6]"></a>Init_HDC1000</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hdc1000.o(i.Init_HDC1000))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_HDC1000 &rArr; I2C_SetSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddr
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC1000_I2C_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>Init_LCD</STRONG> (Thumb, 172 bytes, Stack size 4 bytes, ly096bg30.o(i.Init_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Init_LCD &rArr; oledWriteCommand &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[db]"></a>Init_MPU6050</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, mpu6050.o(i.Init_MPU6050))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Init_MPU6050 &rArr; I2C_SetSlaveAddr
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SetSlaveAddr
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>InputKey_Change</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, configio.o(i.InputKey_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = InputKey_Change &rArr; Keypad_InitTgr
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_InitTgr
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[df]"></a>InputKey_Initiate</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, configio.o(i.InputKey_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = InputKey_Initiate &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWorkingFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_InitKeypad
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Change
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[e3]"></a>Keypad_InitKeypad</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, keypad.o(i.Keypad_InitKeypad))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[de]"></a>Keypad_InitTgr</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, keypad.o(i.Keypad_InitTgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Keypad_InitTgr
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Change
</UL>

<P><STRONG><a name="[e4]"></a>Keypad_ScanTgr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, keypad.o(i.Keypad_ScanTgr))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Keypad_ScanTgr &rArr; Keypad_TgrMapHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_TgrMapHandler
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgrPort
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>Keypad_ScanTgrPort</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, keypad.o(i.Keypad_ScanTgrPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Keypad_ScanTgrPort
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgr
</UL>

<P><STRONG><a name="[13e]"></a>Keypad_TgrDecDebounceCounter</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, keypad.o(i.Keypad_TgrDecDebounceCounter))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[e6]"></a>Keypad_TgrMapHandler</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, keypad.o(i.Keypad_TgrMapHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Keypad_TgrMapHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgr
</UL>

<P><STRONG><a name="[116]"></a>MPU6050_I2C_SingleRead</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mpu6050.o(i.MPU6050_I2C_SingleRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroZ
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroY
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_GyroX
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccZ
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccY
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_MPU6050_AccX
</UL>

<P><STRONG><a name="[dc]"></a>MPU6050_I2C_SingleWrite</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, mpu6050.o(i.MPU6050_I2C_SingleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MPU6050_I2C_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
</UL>

<P><STRONG><a name="[e7]"></a>MultiwiiAccFilter</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, accfilter.o(i.MultiwiiAccFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MultiwiiAccFilter &rArr; sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterCalibrateACC
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
</UL>

<P><STRONG><a name="[86]"></a>NuLiteExApp_DecodeInitiate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, nuliteexapp_decode.o(i.NuLiteExApp_DecodeInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NuLiteExApp_DecodeInitiate
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[8a]"></a>NuLiteExApp_DecodeProcess</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, nuliteexapp_decode.o(i.NuLiteExApp_DecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_UpdateOutputBuf
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_NeedUpdateOutputBuf
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteEx_DecodeProcess
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteEx_DecodeIsEnd
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BufCtrl_WriteWithCount
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPlay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[ee]"></a>NuLiteExApp_DecodeStartPlayByAddr</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, nuliteexapp_decode.o(i.NuLiteExApp_DecodeStartPlayByAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_SetOutputBuf
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteEx_DecodeInitiate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByID
</UL>

<P><STRONG><a name="[8c]"></a>NuLiteExApp_DecodeStartPlayByID</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, nuliteexapp_decode.o(i.NuLiteExApp_DecodeStartPlayByID))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = NuLiteExApp_DecodeStartPlayByID &rArr; NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AudioRom_GetAudioChunkInfo
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
</UL>

<P><STRONG><a name="[90]"></a>NuLiteExApp_DecodeStopPlay</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, nuliteexapp_decode.o(i.NuLiteExApp_DecodeStopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = NuLiteExApp_DecodeStopPlay &rArr; Playback_Remove &rArr; SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Remove
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
</UL>

<P><STRONG><a name="[ef]"></a>NuLiteEx_DecodeInitiate</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, nuliteex.o(i.NuLiteEx_DecodeInitiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = NuLiteEx_DecodeInitiate &rArr; NuLiteXCodec_DecodeInitial
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteXCodec_DecodeInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[ea]"></a>NuLiteEx_DecodeIsEnd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, nuliteex.o(i.NuLiteEx_DecodeIsEnd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
</UL>

<P><STRONG><a name="[eb]"></a>NuLiteEx_DecodeProcess</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, nuliteex.o(i.NuLiteEx_DecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteXCodec_DecodeProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
</UL>

<P><STRONG><a name="[f3]"></a>NuLiteXCodec_DecodeInitial</STRONG> (Thumb, 40 bytes, Stack size 4 bytes, nulitedecode.o(i.NuLiteXCodec_DecodeInitial))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NuLiteXCodec_DecodeInitial
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteEx_DecodeInitiate
</UL>

<P><STRONG><a name="[f4]"></a>NuLiteXCodec_DecodeProcess</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, nulitedecode.o(i.NuLiteXCodec_DecodeProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rmlt_coefs_to_samples
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteEx_DecodeProcess
</UL>

<P><STRONG><a name="[161]"></a>NuLiteXCodec_f_categorize</STRONG> (Thumb, 640 bytes, Stack size 76 bytes, nulitedecode.o(i.NuLiteXCodec_f_categorize))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = NuLiteXCodec_f_categorize
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[174]"></a>OLED_SingleWrite</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, ly096bg30.o(i.OLED_SingleWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OLED_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWriteData
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWriteCommand
</UL>

<P><STRONG><a name="[f7]"></a>OutputPin_Initiate</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, configio.o(i.OutputPin_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OutputPin_Initiate &rArr; GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[88]"></a>OutputPin_Set</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, configio.o(i.OutputPin_Set))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[109]"></a>PDMA_DisableInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pdma.o(i.PDMA_DisableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_DisableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Remove
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[105]"></a>PDMA_EnableInt</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, pdma.o(i.PDMA_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Remove
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[1a]"></a>PDMA_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, interrupthandler.o(i.PDMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = PDMA_IRQHandler &rArr; Playback_Process &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>PDMA_Open</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdma.o(i.PDMA_Open))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[102]"></a>PDMA_SetTransferAddr</STRONG> (Thumb, 30 bytes, Stack size 20 bytes, pdma.o(i.PDMA_SetTransferAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = PDMA_SetTransferAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[103]"></a>PDMA_SetTransferCnt</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, pdma.o(i.PDMA_SetTransferCnt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[104]"></a>PDMA_SetTransferDirection</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pdma.o(i.PDMA_SetTransferDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PDMA_SetTransferDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[f9]"></a>PDMA_SetTransferMode</STRONG> (Thumb, 228 bytes, Stack size 20 bytes, pdma.o(i.PDMA_SetTransferMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
</UL>

<P><STRONG><a name="[107]"></a>PDMA_Trigger</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pdma.o(i.PDMA_Trigger))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
</UL>

<P><STRONG><a name="[fb]"></a>PWM_ConfigOutputChannel</STRONG> (Thumb, 342 bytes, Stack size 144 bytes, pwm.o(i.PWM_ConfigOutputChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PWM_ConfigOutputChannel &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
</UL>

<P><STRONG><a name="[146]"></a>PWM_DisableOutput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(i.PWM_DisableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_EventHandler
</UL>

<P><STRONG><a name="[145]"></a>PWM_EnableOutput</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pwm.o(i.PWM_EnableOutput))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_EventHandler
</UL>

<P><STRONG><a name="[147]"></a>PWM_Start</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, pwm.o(i.PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Start
</UL>

<P><STRONG><a name="[148]"></a>PWM_Stop</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, pwm.o(i.PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Stop
</UL>

<P><STRONG><a name="[fd]"></a>PdmaCtrl_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pdmactrl.o(i.PdmaCtrl_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PdmaCtrl_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[100]"></a>PdmaCtrl_Open</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pdmactrl.o(i.PdmaCtrl_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = PdmaCtrl_Open &rArr; PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferDirection
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferAddr
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Open
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
</UL>

<P><STRONG><a name="[106]"></a>PdmaCtrl_Start</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, pdmactrl.o(i.PdmaCtrl_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_Trigger
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
</UL>

<P><STRONG><a name="[10c]"></a>PdmaCtrl_Stop</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, pdmactrl.o(i.PdmaCtrl_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
</UL>

<P><STRONG><a name="[c3]"></a>PlayNext_KeypadHandler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, inputkeyactions.o(i.PlayNext_KeypadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = PlayNext_KeypadHandler &rArr; App_StartPlay &rArr; NuLiteExApp_DecodeStartPlayByID &rArr; NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
</UL>

<P><STRONG><a name="[c1]"></a>PlayPrev_KeypadHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, inputkeyactions.o(i.PlayPrev_KeypadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = PlayPrev_KeypadHandler &rArr; App_StartPlay &rArr; NuLiteExApp_DecodeStartPlayByID &rArr; NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_Line
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
</UL>

<P><STRONG><a name="[f1]"></a>Playback_Add</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, playback.o(i.Playback_Add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Playback_Add &rArr; SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[112]"></a>Playback_AdjustVolumeDBStep</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, playback.o(i.Playback_AdjustVolumeDBStep))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Playback_AdjustVolumeDBStep
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_VolumeFadeOut
</UL>

<P><STRONG><a name="[84]"></a>Playback_Initiate</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, playback.o(i.Playback_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Playback_Initiate
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ResetChannelVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[10e]"></a>Playback_IsTargetVolume</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, playback.o(i.Playback_IsTargetVolume))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ProcessVolume
</UL>

<P><STRONG><a name="[c2]"></a>Playback_KeypadHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, inputkeyactions.o(i.Playback_KeypadHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = Playback_KeypadHandler &rArr; App_StartPlay &rArr; NuLiteExApp_DecodeStartPlayByID &rArr; NuLiteExApp_DecodeStartPlayByAddr &rArr; NuLiteExApp_DecodeProcess &rArr; NuLiteEx_DecodeProcess &rArr; NuLiteXCodec_DecodeProcess &rArr; f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_Line
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_KeyHandler
</UL>

<P><STRONG><a name="[e9]"></a>Playback_NeedUpdateOutputBuf</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, playback.o(i.Playback_NeedUpdateOutputBuf))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
</UL>

<P><STRONG><a name="[f8]"></a>Playback_Process</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, playback.o(i.Playback_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Playback_Process &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Stop
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ProcessVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>Playback_ProcessVolume</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, playback.o(i.Playback_ProcessVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Playback_ProcessVolume
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_IsTargetVolume
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Process
</UL>

<P><STRONG><a name="[f2]"></a>Playback_Remove</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, playback.o(i.Playback_Remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Playback_Remove &rArr; SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_ChangeSR
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStopPlay
</UL>

<P><STRONG><a name="[10b]"></a>Playback_ResetChannelVolume</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, playback.o(i.Playback_ResetChannelVolume))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Initiate
</UL>

<P><STRONG><a name="[f0]"></a>Playback_SetOutputBuf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, playback.o(i.Playback_SetOutputBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Playback_SetOutputBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeStartPlayByAddr
</UL>

<P><STRONG><a name="[8e]"></a>Playback_StartPlay</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, playback.o(i.Playback_StartPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Playback_StartPlay &rArr; PdmaCtrl_Start &rArr; PDMA_SetTransferCnt
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Start
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ResetChannelVolume
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
</UL>

<P><STRONG><a name="[91]"></a>Playback_StopPlay</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, playback.o(i.Playback_StopPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Playback_StopPlay &rArr; Playback_VolumeFadeOut &rArr; Playback_AdjustVolumeDBStep
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_EnableInt
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_DisableInt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_VolumeFadeOut
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_ResetChannelVolume
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayPrev_KeypadHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayNext_KeypadHandler
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Remove
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[ec]"></a>Playback_UpdateOutputBuf</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, playback.o(i.Playback_UpdateOutputBuf))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteExApp_DecodeProcess
</UL>

<P><STRONG><a name="[110]"></a>Playback_VolumeFadeOut</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, playback.o(i.Playback_VolumeFadeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = Playback_VolumeFadeOut &rArr; Playback_AdjustVolumeDBStep
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_AdjustVolumeDBStep
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
</UL>

<P><STRONG><a name="[1e]"></a>RTC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupthandler.o(i.RTC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[113]"></a>RawSmoothInput</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, ahrslib.o(i.RawSmoothInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = RawSmoothInput
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
</UL>

<P><STRONG><a name="[114]"></a>RawSmoothOutput</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, ahrslib.o(i.RawSmoothOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = RawSmoothOutput &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
</UL>

<P><STRONG><a name="[b6]"></a>Read_HDC1000_Humidity</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hdc1000.o(i.Read_HDC1000_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_HDC1000_Humidity &rArr; HDC1000_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC1000_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertHTValue
</UL>

<P><STRONG><a name="[b5]"></a>Read_HDC1000_Temperature</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hdc1000.o(i.Read_HDC1000_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Read_HDC1000_Temperature &rArr; HDC1000_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HDC1000_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertHTValue
</UL>

<P><STRONG><a name="[74]"></a>Read_MPU6050_AccX</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu6050.o(i.Read_MPU6050_AccX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_MPU6050_AccX &rArr; MPU6050_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[75]"></a>Read_MPU6050_AccY</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu6050.o(i.Read_MPU6050_AccY))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_MPU6050_AccY &rArr; MPU6050_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[76]"></a>Read_MPU6050_AccZ</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu6050.o(i.Read_MPU6050_AccZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_MPU6050_AccZ &rArr; MPU6050_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[b8]"></a>Read_MPU6050_GyroX</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu6050.o(i.Read_MPU6050_GyroX))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_MPU6050_GyroX &rArr; MPU6050_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[b9]"></a>Read_MPU6050_GyroY</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu6050.o(i.Read_MPU6050_GyroY))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_MPU6050_GyroY &rArr; MPU6050_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[ba]"></a>Read_MPU6050_GyroZ</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, mpu6050.o(i.Read_MPU6050_GyroZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Read_MPU6050_GyroZ &rArr; MPU6050_I2C_SingleRead
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU6050_I2C_SingleRead
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[117]"></a>SPIFlash_GetChipInfo</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, spiflash.o(i.SPIFlash_GetChipInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIFlash_GetChipInfo &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[119]"></a>SPIFlash_Initiate</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, main.o(i.SPIFlash_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SPIFlash_Initiate &rArr; SPIFlash_Open &rArr; SPI_Open &rArr; SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_PowerDown
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_GetChipInfo
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[11a]"></a>SPIFlash_Open</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, spiflash.o(i.SPIFlash_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SPIFlash_Open &rArr; SPI_Open &rArr; SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[11b]"></a>SPIFlash_PowerDown</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, spiflash.o(i.SPIFlash_PowerDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIFlash_PowerDown &rArr; SPIFlash_SendRecOneData
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[11c]"></a>SPIFlash_Read</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, spiflash.o(i.SPIFlash_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIFlash_Read &rArr; SPIFlash_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadEnd
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_ReadDataCallback
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[11f]"></a>SPIFlash_ReadData</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, spiflash.o(i.SPIFlash_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIFlash_ReadData
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>

<P><STRONG><a name="[23]"></a>SPIFlash_ReadDataCallback</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, appcallback.o(i.SPIFlash_ReadDataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SPIFlash_ReadDataCallback &rArr; SPIFlash_Read &rArr; SPIFlash_ReadData
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>
<BR>[Address Reference Count : 2]<UL><LI> appcallback.o(.constdata)
<LI> appfunctions.o(i.App_Initiate)
</UL>
<P><STRONG><a name="[120]"></a>SPIFlash_ReadEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, spiflash.o(i.SPIFlash_ReadEnd))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>

<P><STRONG><a name="[11e]"></a>SPIFlash_ReadStart</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, spiflash.o(i.SPIFlash_ReadStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIFlash_ReadStart
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Read
</UL>

<P><STRONG><a name="[118]"></a>SPIFlash_SendRecOneData</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, spiflash.o(i.SPIFlash_SendRecOneData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPIFlash_SendRecOneData
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_PowerDown
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_GetChipInfo
</UL>

<P><STRONG><a name="[121]"></a>SPI_GetBusClock</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, spi.o(i.SPI_GetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_GetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[11d]"></a>SPI_Open</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, spi.o(i.SPI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_Open &rArr; SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetVarClock
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBusClock
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetBusClock
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Open
</UL>

<P><STRONG><a name="[123]"></a>SPI_SetBusClock</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, spi.o(i.SPI_SetBusClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_SetBusClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[122]"></a>SPI_SetVarClock</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, spi.o(i.SPI_SetVarClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI_SetVarClock &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Open
</UL>

<P><STRONG><a name="[10a]"></a>SPK_ChangeSR</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, micspk.o(i.SPK_ChangeSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPK_ChangeSR &rArr; DPWM_SetSampleRate &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_SetSampleRate
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Remove
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_Add
</UL>

<P><STRONG><a name="[124]"></a>SPK_Open</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, micspk.o(i.SPK_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SPK_Open &rArr; PdmaCtrl_Open &rArr; PDMA_SetTransferMode &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Open
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_Open
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQFilter_Setting
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[10f]"></a>SPK_Start</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, micspk.o(i.SPK_Start))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StartPlay
</UL>

<P><STRONG><a name="[111]"></a>SPK_Stop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, micspk.o(i.SPK_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_StopPlay
</UL>

<P><STRONG><a name="[9b]"></a>SYS_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys.o(i.SYS_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>

<P><STRONG><a name="[137]"></a>SYS_LockReg</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys.o(i.SYS_LockReg))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[fe]"></a>SYS_ResetModule</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys.o(i.SYS_ResetModule))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>

<P><STRONG><a name="[9a]"></a>SYS_Unlock</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, sys.o(i.SYS_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>

<P><STRONG><a name="[133]"></a>SYS_UnlockReg</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sys.o(i.SYS_UnlockReg))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
</UL>

<P><STRONG><a name="[127]"></a>SampleFilter</STRONG> (Thumb, 392 bytes, Stack size 32 bytes, acccalibrate.o(i.SampleFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SampleFilter &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterACCInit
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[12b]"></a>SendChar</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, retarget.o(i.SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[12c]"></a>SendChar_ToUART</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, retarget.o(i.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>

<P><STRONG><a name="[16b]"></a>SensorStateInit</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, ahrslib.o(i.SensorStateInit))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[c7]"></a>SensorsDynamicCalibrate</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, mpu6050_api.o(i.SensorsDynamicCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = SensorsDynamicCalibrate &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetGyroOffset
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
</UL>

<P><STRONG><a name="[12f]"></a>SetCalibrateACC</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, acccalibrate.o(i.SetCalibrateACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetCalibrateACC &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawACC
</UL>

<P><STRONG><a name="[130]"></a>SetCalibrateGYRO</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, gyrocalibrate.o(i.SetCalibrateGYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SetCalibrateGYRO &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtInputSensorRawGYRO
</UL>

<P><STRONG><a name="[131]"></a>SetMagGuass</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, magcalibrate.o(i.SetMagGuass))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SetMagGuass &rArr; sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[171]"></a>SetZWithoutG_Base</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ahrslib.o(i.SetZWithoutG_Base))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[132]"></a>SetupSecurityID</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, security.o(i.SetupSecurityID))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SetupSecurityID &rArr; FMCReadUCID
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Close
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_UnlockReg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_LockReg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMC_Open
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FMCReadUCID
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtAHRSInit
</UL>

<P><STRONG><a name="[138]"></a>SysClk_InitiateRC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, sysclk.o(i.SysClk_InitiateRC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SysClk_InitiateRC &rArr; CLK_SetHCLK &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[a]"></a>SysTick_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, timer_ctrl.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SysTick_Handler &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtMillisecondTick
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, system_isd9100.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DPWM_SetSampleRate
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
</UL>

<P><STRONG><a name="[13a]"></a>System_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, main.o(i.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = System_Init &rArr; UltraIO_Initiate &rArr; PWM_ConfigOutputChannel &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_InitiateRC
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutputPin_Initiate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableLDO
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIFlash_Initiate
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, timer.o(i.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetWorkingFreq
</UL>

<P><STRONG><a name="[e1]"></a>TIMER_GetWorkingFreq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, timer.o(i.TIMER_GetWorkingFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TIMER_GetWorkingFreq &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InputKey_Initiate
</UL>

<P><STRONG><a name="[cd]"></a>TIMER_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, timer_ctrl.o(i.TIMER_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[13d]"></a>TIMER_Open</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, timer.o(i.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_Initiate
</UL>

<P><STRONG><a name="[13]"></a>TMR0_IRQHandler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, timer_ctrl.o(i.TMR0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TMR0_IRQHandler &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtMillisecondTick
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TMR1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, interrupthandler.o(i.TMR1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_OuputCurve
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_TgrDecDebounceCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>UART0_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(i.UART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART0_IRQHandler &rArr; UART_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, main.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_Init &rArr; UART_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[142]"></a>UART_Open</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, uart.o(i.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_Open &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHCLKFreq
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[140]"></a>UART_Read</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, uart.o(i.UART_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
</UL>

<P><STRONG><a name="[169]"></a>UART_Write_Wecan</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, main.o(i.UART_Write_Wecan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Write_Wecan
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[144]"></a>UltraIO_EventHandler</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, ultraio.o(i.UltraIO_EventHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UltraIO_EventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_EnableOutput
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_DisableOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserEvent_ProcessCallback
</UL>

<P><STRONG><a name="[13b]"></a>UltraIO_Initiate</STRONG> (Thumb, 202 bytes, Stack size 8 bytes, ultraio.o(i.UltraIO_Initiate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = UltraIO_Initiate &rArr; PWM_ConfigOutputChannel &rArr; CLK_GetHCLKFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetModuleClock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_ConfigOutputChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[13f]"></a>UltraIO_OuputCurve</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, ultraio.o(i.UltraIO_OuputCurve))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_IRQHandler
</UL>

<P><STRONG><a name="[8d]"></a>UltraIO_Start</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, ultraio.o(i.UltraIO_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UltraIO_Start &rArr; PWM_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StartPlay
</UL>

<P><STRONG><a name="[92]"></a>UltraIO_Stop</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ultraio.o(i.UltraIO_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UltraIO_Stop &rArr; PWM_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
</UL>

<P><STRONG><a name="[149]"></a>UpdateCalibrateInfoACC</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, acccalibrate.o(i.UpdateCalibrateInfoACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UpdateCalibrateInfoACC
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCalibrateParams
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtCalACCBufferFill
</UL>

<P><STRONG><a name="[28]"></a>UserEvent_ProcessCallback</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, appcallback.o(i.UserEvent_ProcessCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UserEvent_ProcessCallback &rArr; UltraIO_EventHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UltraIO_EventHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appcallback.o(.constdata)
</UL>
<P><STRONG><a name="[c]"></a>WDT_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupthandler.o(i.WDT_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[14e]"></a>__ARM_common_ll_muluu</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, rred.o(i.__ARM_common_ll_muluu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_common_ll_muluu
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[fa]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, pdma.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDMA_SetTransferMode
</UL>

<P><STRONG><a name="[153]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[14b]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 838 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_ll_muluu
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[150]"></a>__kernel_cos</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[151]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[152]"></a>__kernel_sin</STRONG> (Thumb, 222 bytes, Stack size 64 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[155]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[156]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[157]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>

<P><STRONG><a name="[154]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[4a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[af]"></a>atan</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[ae]"></a>atan2</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
</UL>

<P><STRONG><a name="[70]"></a>calibrate_model_acc</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, gauss_newton_calibrate.o(i.calibrate_model_acc))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = calibrate_model_acc &rArr; update_calibration_matrices &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset_calibration_matrices
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_delta
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrate
</UL>

<P><STRONG><a name="[15b]"></a>checkMagFail</STRONG> (Thumb, 164 bytes, Stack size 40 bytes, sensorfusion6.o(i.checkMagFail))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = checkMagFail &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetMagGuass
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[15e]"></a>clear_LCD</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ly096bg30.o(i.clear_LCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = clear_LCD &rArr; oled_address &rArr; oledWriteCommand &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_address
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>cos</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, cos.o(i.cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
</UL>

<P><STRONG><a name="[64]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, retarget.o(i.ferror))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[159]"></a>find_delta</STRONG> (Thumb, 266 bytes, Stack size 40 bytes, gauss_newton_calibrate.o(i.find_delta))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = find_delta &rArr; __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>

<P><STRONG><a name="[22]"></a>fputc</STRONG> (Thumb, 16 bytes, Stack size 12 bytes, retarget.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SendChar
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>getTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer_ctrl.o(i.getTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMsec
</UL>

<P><STRONG><a name="[163]"></a>i2c_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, main.o(i.i2c_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = i2c_Init &rArr; I2C_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_ResetModule
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Open
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 380 bytes, Stack size 40 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 688 + Unknown Stack Size
<LI>Call Chain = main &rArr; GyroCalibrate &rArr; SensorsDynamicCalibrate &rArr; nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_Line
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_LCD
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keypad_ScanTgr
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MPU6050
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_HDC1000
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EnableInt
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_StopPlay
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_ProcessPlay
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_Init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Write_Wecan
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertHTValue
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[cf]"></a>nvtAHRSInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ahrslib.o(i.nvtAHRSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nvtAHRSInit &rArr; AccFilterInit &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetupSecurityID
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccFilterInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorStateInit
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalInfoInit
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[78]"></a>nvtCalACCBufferFill</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, acccalibrate.o(i.nvtCalACCBufferFill))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = nvtCalACCBufferFill &rArr; AccZCalibrate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrate
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateCalibrateInfoACC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
</UL>

<P><STRONG><a name="[72]"></a>nvtCalACCInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, acccalibrate.o(i.nvtCalACCInit))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
</UL>

<P><STRONG><a name="[16d]"></a>nvtGetAccZWithoutGravity</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ahrslib.o(i.nvtGetAccZWithoutGravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvtGetAccZWithoutGravity &rArr; sensfusion6GetAccZWithoutGravity &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetAccZWithoutGravity
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGyroCenterCalibrate
</UL>

<P><STRONG><a name="[bd]"></a>nvtGetEulerRPY</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ahrslib.o(i.nvtGetEulerRPY))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvtGetEulerRPY &rArr; sensfusion6GetEulerRPY
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetEulerRPY
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[12e]"></a>nvtGetGyroOffset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahrslib.o(i.nvtGetGyroOffset))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
</UL>

<P><STRONG><a name="[12d]"></a>nvtGyroCenterCalibrate</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, gyrocalibrate.o(i.nvtGyroCenterCalibrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = nvtGyroCenterCalibrate &rArr; GyroDynamicCalibrate &rArr; CheckGyroNormalParam &rArr; quickSortIterative
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetGyroDynamicCenter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZWithoutG_Base
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SensorsDynamicCalibrate
</UL>

<P><STRONG><a name="[77]"></a>nvtInputSensorRawACC</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ahrslib.o(i.nvtInputSensorRawACC))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = nvtInputSensorRawACC &rArr; MultiwiiAccFilter &rArr; sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateACC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrationZ
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[bb]"></a>nvtInputSensorRawGYRO</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, ahrslib.o(i.nvtInputSensorRawGYRO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nvtInputSensorRawGYRO &rArr; RawSmoothOutput &rArr; __aeabi_fadd
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateGYRO
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothInput
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroCalibrate
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[139]"></a>nvtMillisecondTick</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ahrslib.o(i.nvtMillisecondTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nvtMillisecondTick &rArr; CheckSecurityID
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR0_IRQHandler
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d2]"></a>nvtSetAccG_PER_LSB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, acccalibrate.o(i.nvtSetAccG_PER_LSB))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[d1]"></a>nvtSetAccOffset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahrslib.o(i.nvtSetAccOffset))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[d0]"></a>nvtSetAccScale</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahrslib.o(i.nvtSetAccScale))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[d5]"></a>nvtSetGYRODegPLSB</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gyrocalibrate.o(i.nvtSetGYRODegPLSB))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[d4]"></a>nvtSetGyroOffset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahrslib.o(i.nvtSetGyroOffset))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[d3]"></a>nvtSetGyroScale</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ahrslib.o(i.nvtSetGyroScale))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[bc]"></a>nvtUpdateAHRS</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, ahrslib.o(i.nvtUpdateAHRS))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = nvtUpdateAHRS &rArr; sensfusion9UpdateQ &rArr; sensfusion6UpdateQ &rArr; ComputeEuler &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecurityID
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[da]"></a>oledWriteCommand</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ly096bg30.o(i.oledWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oledWriteCommand &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_LCD
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_address
</UL>

<P><STRONG><a name="[160]"></a>oledWriteData</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ly096bg30.o(i.oledWriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = oledWriteData &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_SingleWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_LCD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_C
</UL>

<P><STRONG><a name="[15f]"></a>oled_address</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, ly096bg30.o(i.oled_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = oled_address &rArr; oledWriteCommand &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_LCD
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_C
</UL>

<P><STRONG><a name="[175]"></a>print_C</STRONG> (Thumb, 72 bytes, Stack size 36 bytes, ly096bg30.o(i.print_C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = print_C &rArr; oled_address &rArr; oledWriteCommand &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oled_address
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;oledWriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_Line
</UL>

<P><STRONG><a name="[108]"></a>print_Line</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ly096bg30.o(i.print_Line))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = print_Line &rArr; print_C &rArr; oled_address &rArr; oledWriteCommand &rArr; OLED_SingleWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_C
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Playback_KeypadHandler
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayPrev_KeypadHandler
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlayNext_KeypadHandler
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>pushBuffer</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, gyrodriftcalibrate.o(i.pushBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = pushBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GyroDynamicCalibrate
</UL>

<P><STRONG><a name="[a6]"></a>quickSortIterative</STRONG> (Thumb, 182 bytes, Stack size 560 bytes, gyrodriftcalibrate.o(i.quickSortIterative))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = quickSortIterative
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckGyroNormalParam
</UL>

<P><STRONG><a name="[6f]"></a>reset_calibration_matrices</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gauss_newton_calibrate.o(i.reset_calibration_matrices))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = reset_calibration_matrices
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccCalibrate
</UL>

<P><STRONG><a name="[16e]"></a>sensfusion6GetAccZWithoutGravity</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, sensorfusion6.o(i.sensfusion6GetAccZWithoutGravity))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sensfusion6GetAccZWithoutGravity &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
</UL>

<P><STRONG><a name="[16f]"></a>sensfusion6GetEulerRPY</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, sensorfusion6.o(i.sensfusion6GetEulerRPY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = sensfusion6GetEulerRPY
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetEulerRPY
</UL>

<P><STRONG><a name="[173]"></a>sensfusion6UpdateMagByEuler</STRONG> (Thumb, 442 bytes, Stack size 48 bytes, sensorfusion6.o(i.sensfusion6UpdateMagByEuler))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = sensfusion6UpdateMagByEuler &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sin
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cos
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
</UL>

<P><STRONG><a name="[176]"></a>sensfusion6UpdateQ</STRONG> (Thumb, 984 bytes, Stack size 112 bytes, sensorfusion6.o(i.sensfusion6UpdateQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = sensfusion6UpdateQ &rArr; ComputeEuler &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[172]"></a>sensfusion9UpdateQ</STRONG> (Thumb, 1600 bytes, Stack size 128 bytes, sensorfusion6.o(i.sensfusion9UpdateQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sensfusion9UpdateQ &rArr; sensfusion6UpdateQ &rArr; ComputeEuler &rArr; sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetTickCounter
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
</UL>

<P><STRONG><a name="[ce]"></a>setup_system_tick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer_ctrl.o(i.setup_system_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setup_system_tick &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChronographStart
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_AHRS
</UL>

<P><STRONG><a name="[b2]"></a>sin</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, sin.o(i.sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
</UL>

<P><STRONG><a name="[ab]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = sqrt &rArr; _dsqrt
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
</UL>

<P><STRONG><a name="[bf]"></a>transfer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.transfer))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConvertMPU6050Value
</UL>

<P><STRONG><a name="[158]"></a>update_calibration_matrices</STRONG> (Thumb, 190 bytes, Stack size 56 bytes, gauss_newton_calibrate.o(i.update_calibration_matrices))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = update_calibration_matrices &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>

<P><STRONG><a name="[15d]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
</UL>

<P><STRONG><a name="[17b]"></a>_drcmple</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, drlef.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[a4]"></a>__aeabi_fadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtUpdateAHRS
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckNormalDistribution
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateMagByEuler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetAccZWithoutGravity
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawSmoothOutput
</UL>

<P><STRONG><a name="[17c]"></a>_fadd</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_cfcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
</UL>

<P><STRONG><a name="[17e]"></a>_fcmple</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, flef.o(x$fpl$fleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[a1]"></a>__aeabi_fmul</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_delta
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterCalibrateACC
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetMagGuass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetAccZWithoutGravity
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateGYRO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateACC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
</UL>

<P><STRONG><a name="[1c1]"></a>_fmul</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, fmul.o(x$fpl$fmul), UNUSED)

<P><STRONG><a name="[15a]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_cfrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
</UL>

<P><STRONG><a name="[17f]"></a>_frcmple</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, frlef.o(x$fpl$frleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcmp_InfNaN
</UL>

<P><STRONG><a name="[129]"></a>__aeabi_frsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;invSqrt
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_delta
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SampleFilter
</UL>

<P><STRONG><a name="[180]"></a>_frsb</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, faddsub.o(x$fpl$frsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub1
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_fsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fsub
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkMagFail
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeMotion
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComputeEuler
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_calibration_matrices
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calibrate_model_acc
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckStandardDV
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEmpirical
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterCalibrateACC
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccZCalibrate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6GetAccZWithoutGravity
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateGYRO
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCalibrateACC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MultiwiiAccFilter
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvtGetAccZWithoutGravity
</UL>

<P><STRONG><a name="[182]"></a>_fsub</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd1
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[143]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[166]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, main.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[85]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, appfunctions.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Initiate
</UL>

<P><STRONG><a name="[12]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_isd9100.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_isd9100.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>BIQFilter_Setting</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, micspk.o(i.BIQFilter_Setting))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BIQFilter_Setting &rArr; BIQ_SetCoeff
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableModuleClock
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQ_SetCoeff
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BIQ_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPK_Open
</UL>

<P><STRONG><a name="[ff]"></a>NVIC_ClearPendingIRQ</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, pdmactrl.o(i.NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PdmaCtrl_Init
</UL>

<P><STRONG><a name="[178]"></a>NVIC_SetPriority</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, timer_ctrl.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_system_tick
</UL>

<P><STRONG><a name="[162]"></a>f_decode_vector_quantized_mlt_indices</STRONG> (Thumb, 902 bytes, Stack size 152 bytes, nulitedecode.o(i.f_decode_vector_quantized_mlt_indices))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decoder
</UL>

<P><STRONG><a name="[f5]"></a>f_decoder</STRONG> (Thumb, 510 bytes, Stack size 48 bytes, nulitedecode.o(i.f_decoder))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = f_decoder &rArr; f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteXCodec_f_categorize
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_decode_vector_quantized_mlt_indices
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteXCodec_DecodeProcess
</UL>

<P><STRONG><a name="[f6]"></a>f_rmlt_coefs_to_samples</STRONG> (Thumb, 908 bytes, Stack size 128 bytes, nulitedecode.o(i.f_rmlt_coefs_to_samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = f_rmlt_coefs_to_samples
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NuLiteXCodec_DecodeProcess
</UL>

<P><STRONG><a name="[164]"></a>invSqrt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sensorfusion6.o(i.invSqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = invSqrt &rArr; __aeabi_fmul
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion6UpdateQ
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensfusion9UpdateQ
</UL>

<P><STRONG><a name="[52]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[51]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, daddsub.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[181]"></a>_fadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fsub
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
</UL>

<P><STRONG><a name="[17d]"></a>_fsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, faddsub.o(x$fpl$fsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frsb
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fadd
</UL>

<P><STRONG><a name="[21]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>_call_atexit_fns</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[63]"></a>_printf_post_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[62]"></a>_printf_pre_padding</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[45]"></a>_printf_truncate_signed</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[46]"></a>_printf_truncate_unsigned</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>
<HR></body></html>
